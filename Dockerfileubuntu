FROM ubuntu:20.04

RUN mkdir -p /root/build && cd /root/build
WORKDIR /root/build

# install go env 
RUN apt update -y && apt upgrade -y
RUN apt clean -y && apt autoclean -y
RUN apt remove --purge -y && apt autoremove --purge -y
RUN echo "Asia\nShanghai" | apt-get install -y tzdata
RUN apt install -y gcc g++ make cmake gdb m4 libtool sqlite3 python2 python3 htop git git-lfs iputils-ping tree subversion
RUN apt install -y binutils bison coreutils diffutils findutils gawk g++ build-essential libstdc++-9-dev \
    grep gzip m4 make patch perl python3 sed texinfo xz-utils gdb wget tree htop

ADD https://go.dev/dl/go1.19.linux-amd64.tar.gz .
RUN rm -rf /usr/local/go && tar -C /usr/local -xzf go1.19.linux-amd64.tar.gz
ENV PATH=$PATH:/usr/local/go/bin

ARG FFMPEG_VERSION=5.1.2
ARG VIPS_VERSION=8.14.3
ARG CGIF_VERSION=0.3.0
ARG LIBSPNG_VERSION=0.7.3
ARG TARGETARCH

ENV PKG_CONFIG_PATH=/usr/local/lib/pkgconfig
ENV MAKEFLAGS="-j8"


# Installs libvips + required libraries
RUN DEBIAN_FRONTEND=noninteractive \
  apt-get update && \
  apt-get install --no-install-recommends -y \
  ca-certificates \
  automake build-essential curl \
  python3-pip ninja-build pkg-config \
  gobject-introspection gtk-doc-tools libjpeg-turbo8-dev libjpeg8-dev libjpeg-dev libhdf5-dev  libtiff-dev ibglib2.0-dev  libpng-dev \
  libwebp-dev libtiff5-dev libexif-dev libxml2-dev libpoppler-glib-dev \
  swig libpango1.0-dev libmatio-dev libopenslide-dev libcfitsio-dev libopenjp2-7-dev \
  libgsf-1-dev fftw3-dev liborc-0.4-dev librsvg2-dev libimagequant-dev libheif-dev \
  yasm libx264-dev libx265-dev libnuma-dev libvpx-dev libtheora-dev  \
  librtmp-dev libvorbis-dev libjemalloc2 && \
  ln -s /usr/lib/$(uname -m)-linux-gnu/libjemalloc.so.2 /usr/local/lib/libjemalloc.so && \
  pip3 install meson && \
  cd /tmp && \
    curl -fsSLO https://github.com/dloebl/cgif/archive/refs/tags/V${CGIF_VERSION}.tar.gz && \
    tar xf V${CGIF_VERSION}.tar.gz && \
    cd cgif-${CGIF_VERSION} && \
    meson build --prefix=/usr/local --libdir=/usr/local/lib --buildtype=release && \
    cd build && \
    ninja && \
    ninja install && \
  cd /tmp && \
    curl -fsSLO https://github.com/randy408/libspng/archive/refs/tags/v${LIBSPNG_VERSION}.tar.gz && \
    tar xf v${LIBSPNG_VERSION}.tar.gz && \
    cd libspng-${LIBSPNG_VERSION} && \
    meson setup _build \
      --buildtype=release \
      --strip \
      --prefix=/usr/local \
      --libdir=lib && \
    ninja -C _build && \
    ninja -C _build install && \
  cd /tmp && \
    curl -fsSLO https://github.com/libvips/libvips/releases/download/v${VIPS_VERSION}/vips-${VIPS_VERSION}.tar.xz && \
    tar xf vips-${VIPS_VERSION}.tar.xz && \
    cd vips-${VIPS_VERSION} && \
    meson setup _build \
    --buildtype=release \
    --strip \
    --prefix=/usr/local \
    --libdir=lib \
    -Dgtk_doc=false \
    -Dmagick=disabled \
    -Dintrospection=false && \
    ninja -C _build && \
    ninja -C _build install && \
  cd /tmp && \
    curl -fsSLO https://ffmpeg.org/releases/ffmpeg-${FFMPEG_VERSION}.tar.bz2 && \
    tar jvxf ffmpeg-${FFMPEG_VERSION}.tar.bz2 && \
    cd /tmp/ffmpeg-${FFMPEG_VERSION} && \
    ./configure --prefix=/usr/local  \
    --disable-debug  \
    --disable-doc  \
    --disable-ffplay \
    --disable-static  \
    --enable-shared  \
    --enable-version3  \
    --enable-gpl  \
    --enable-libtheora \
    --enable-libvorbis \
    --enable-librtmp \
    --enable-libwebp \
    --enable-libvpx  \
    --enable-libx265  \
    --enable-libx264 && \
    make && make install && \
  ldconfig && \
  rm -rf /usr/local/lib/python* && \
  rm -rf /usr/local/lib/libvips-cpp.* && \
  rm -rf /usr/local/lib/*.a && \
  rm -rf /usr/local/lib/*.la


ENV GOPATH=/root/build
WORKDIR ${GOPATH}/src/github.com/cshum/imagorvideo

COPY go.mod .
COPY go.sum .

RUN go mod download

COPY . .

RUN if [ "$TARGETARCH" = "amd64" ]; then go test ./...; fi
RUN go build -o /usr/local/bin/imagorvideo ./cmd/imagorvideo/main.go



#COPY  ${GOPATH}/bin/imagorvideo /usr/local/bin/imagorvideo

ENV VIPS_WARNING=0
ENV MALLOC_ARENA_MAX=2
ENV LD_PRELOAD=/usr/local/lib/libjemalloc.so

ENV PORT 8000


ENTRYPOINT ["/usr/local/bin/imagorvideo"]

EXPOSE ${PORT}
